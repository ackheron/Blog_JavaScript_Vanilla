import axios from "axios";
import { openModal } from "../assets/javascripts/modal.js";
import "../assets/styles/main.scss";
console.log("Hello from form");

// Selection du formulaire
const form = document.querySelector("form");
// Selection de liste ul pour afficher les erreurs
const errorElement = document.querySelector("#errors");

// Selection du bouton annuler
const btnCancel = document.querySelector(".btn-secondary");

// Variable pour stocker l'id de l'url en cas de modification de l'article
let articleId;

// Variable qui stocke les donn√©es du formulaire en cours de modification
let getArticle;

/*=============================================
=            initForm            =

La fonction initForm utilise l'API URL pour r√©cup√©rer les param√®tres de la requ√™te HTTP. Elle extrait la valeur du param√®tre id en utilisant la m√©thode searchParams.get(), et stocke cette valeur dans la variable articleId.
=============================================*/

const initForm = async () => {
    const params = new URL(location.href);
    articleId = params.searchParams.get("id");
    /* Si la variable articleId est d√©finie, la fonction utilise Axios pour effectuer une requ√™te HTTP GET √† l'URL https://restapi.fr/api/ackblog8/${articleId}. Si la r√©ponse HTTP a un statut inf√©rieur √† 300, ce qui signifie que la requ√™te a r√©ussi, la fonction r√©cup√®re les donn√©es de l'article √† partir de la propri√©t√© data de la r√©ponse, et appelle la fonction fillForm en passant ces donn√©es en param√®tre. */
    if (articleId) {
        const response = await axios.get(`https://restapi.fr/api/ackblog8/${articleId}`);
        if (response.status < 300) {
            getArticle = response.data;
            console.log("üöÄ ~ file: form.js:23 ~ initForm ~ article:", getArticle);
            fillForm(getArticle);
        }
    }
};

initForm();

/*=====  End of initForm  ======*/

/*=============================================
=            fillForm            =

La fonction fillForm r√©cup√®re les √©l√©ments HTML correspondant aux diff√©rents champs du formulaire (nom de l'auteur, image, cat√©gorie, titre et contenu), et d√©finit leur valeur en fonction des propri√©t√©s de l'article pass√©es en param√®tre. Si une propri√©t√© n'est pas d√©finie dans l'article, elle est remplac√©e par une cha√Æne de caract√®res vide.
=============================================*/

const fillForm = (article) => {
    const author = document.querySelector('input[name="author"]');
    const img = document.querySelector('input[name="img"]');
    const category = document.querySelector('input[name="category"]');
    const title = document.querySelector('input[name="title"]');
    const content = document.querySelector('textarea[name="content"]');
    author.value = article.author || "";
    img.value = article.img || "";
    category.value = article.category || "";
    title.value = article.title || "";
    content.value = article.content || "";
};

/*=====  End of fillForm  ======*/

form.addEventListener("submit", async (event) => {
    event.preventDefault();

    /*  L'objet FormData est utilis√© pour r√©cup√©rer les donn√©es saisies dans un formulaire HTML. L'objet FormData est une interface standard du navigateur web qui permet de cr√©er des paires cl√©/valeur √† partir des champs de formulaire */
    const data = new FormData(form);

    /* la m√©thode entries() de l'objet formData renverra une liste it√©rable de paires cl√©/valeur  */
    const entries = data.entries();

    /* la ligne de code suivante convertit cette liste it√©rable en un objet JavaScript avec la m√©thode Object.fromEntries() */
    const formObject = Object.fromEntries(entries);

    /* M√âTHODE A AVEC FETCH
//    Appel de la fonction formIsValid pour valider saisies dans le formulaire
    if (formIsValid(formObject)) {
        try {
            const json = JSON.stringify(formObject);

            const response = await fetch("https://restapi.fr/api/ackblog2", {
                method: "POST",
                headers: { Accept: "application/json", "Content-Type": "application/json" },
                body: json,
            });

            const body = await response.json();
            console.log("üöÄ ~ file: form.js ~ line 37 ~ form.addEventListener ~ body", body);
        } catch (error) {
            console.error(error);
        }
    }
 */
    /*M√âTHODE AVEC AXIOS */
    if (formIsValid(formObject)) {
        try {
            let response;
            // Si la variable de 'articleId' est d√©finie alors nous sommes en mode √©dition d'article et on utilise la m√©thode patch() pour mettre √† jour.
            if (articleId) {
                // Nous voulons garder la date d'origine d'un article modifi√©, nous attribuons √† la cl√© createdAt de formObject la valeur de createdAt de getArticle qui stocke la date originelle.
                formObject.createdAt = getArticle.createdAt;
                response = await axios.patch(`https://restapi.fr/api/ackblog8/${articleId}`, formObject);
            } else {
                // Sinon nous sommes en mode cr√©ation et on utilise la m√©thode post()
                response = await axios.post("https://restapi.fr/api/ackblog8", formObject);
            }
            // Si le statut de la r√©ponse est inf√©rieur √† 300, cela signifie qu'il n'y a pas eu d'erreurs renvoy√©es par le serveur.
            if (response.status < 299) {
                // alors on redirige l‚Äôutilisateur vers la page d‚Äôaccueil
                location.assign("/index.html");
            }
        } catch (error) {
            console.error(error);
        }
    }
});

btnCancel.addEventListener("click", async () => {
    const result = await openModal("Si vous quittez la page, vous allez perdre votre article");
    // redirection sur la page d'accueil quand l'utilisateur clique sur annuler
    if (result === true) {
        location.assign("./index.html");
    }
});

/*=============================================
=            formIsValid            =

Fonction de traitement de l'objet formObject
=============================================*/

const formIsValid = (formObject) => {
    // Tableau pour stocker les messages d'erreurs sous forme de chaines de caract√®res
    let errors = [];

    /* si le champ "author", "category" ou "content" est vide, un message d'erreur est ajout√© au tableau errors.
    si la longueur du champ "content" est inf√©rieure √† 20 caract√®res, un autre message d'erreur est ajout√© au tableau. */
    if (!formObject.author || !formObject.category || !formObject.content || !formObject.img || !formObject.title) {
        errors.push("Vous devez renseigner tout les champs");
    }
    if (formObject.content.length < 20) {
        errors.push("Le contenu de de votre article est trop court !");
    }
    console.log("üöÄ ~ file: form.js ~ line 56 ~ formIsValid ~ errors", errors);

    /* si le tableau errors contient au moins une erreur, la fonction cr√©e une liste HTML (<li>) pour chaque message d'erreur et l'affiche dans l'√©l√©ment errorElement avec la m√©thode innerHTML. */
    if (errors.length) {
        let errorHTML = "";
        errors.forEach((element) => {
            errorHTML += `<li>${element}</li>`;
        });
        errorElement.innerHTML = errorHTML;
        return false;
    } else {
        errorElement.innerHTML = "";
        return true;
    }
};

/*=====  End of formIsValid  ======*/
