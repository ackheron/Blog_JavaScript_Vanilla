import "./assets/styles/main.scss";

console.log("hello from index");
/*=============================================
=            PREMIERE VERSION AVEC M√âTHODE .MAP()          =
=============================================*/

// // S√©lectionne l'√©l√©ment HTML qui a une classe de `articles-container` et le stocke dans une variable `articlesContainerElement`.
// const articlesContainerElement = document.querySelector(".articles-container");

// // Cette fonction prend un tableau d'articles en param√®tre et cr√©e un √©l√©ment HTML pour chaque article.
// const createArticles = (articles) => {
//     // Cr√©e un tableau contenant tous les √©l√©ments div cr√©√©s pour chaque article.

//     const articlesDOM = articles.map((article) => {
//         // Cr√©e un nouveau div pour chaque article.
//         const singleArticleDOM = document.createElement("div");
//         // Ajoute une classe `article` au div cr√©√©.
//         singleArticleDOM.classList.add("article");
//         // D√©finit le contenu HTML de la div cr√©√© en utilisant les propri√©t√©s de l'objet article pass√© en param√®tre.
//         singleArticleDOM.innerHTML = `
//                         <img class="article-profile" src="${article.img}" alt="profile" />
//                         <h2 class="article-title">${article.title}</h2>
//                         <p class="article-author">${article.author}</p>
//                         <p class="article-content">
//                         ${article.article}
//                         </p>
//                         <div class="article-actions">
//                             <button class="btn btn-danger data-id=${article._id}">Supprimer</button>
//                             <button class="btn btn-primary">Modifier</button>
//                         </div>
//        `;
//         // Retourne la div cr√©√©.
//         return singleArticleDOM;
//     });
//     // Efface le contenu de l'√©l√©ment HTML s√©lectionn√©.
//     articlesContainerElement.innerHTML = "";
//     // Ajoute les √©l√©ments div cr√©√©s dans l'√©l√©ment HTML s√©lectionn√©.
//     articlesContainerElement.append(...articlesDOM);
// };

// // Cette fonction est asynchrone et utilise l'API Fetch pour r√©cup√©rer des donn√©es d'un endpoint de l'API REST.
// const fetchArticles = async () => {
//     try {
//         // R√©cup√®re les donn√©es √† partir de l'API REST en utilisant l'API Fetch.
//         const response = await fetch("https://restapi.fr/api/ackblog");
//         // Convertit les donn√©es retourn√©es en objet JavaScript.
//         let articles = await response.json();

//         // Restapi retourne un objet s'il n'y a qu'un seul article
//         // nous devons donc le transformer en tableau :
//         if (!Array.isArray(articles)) {
//             articles = [articles];
//             console.log("üöÄ ~ file: index.js ~ line 15 ~ fetchArticles ~ articles", articles);
//         }
//         // Appelle la fonction `createArticles` pour afficher les articles r√©cup√©r√©s dans la page HTML.
//         createArticles(articles);
//         console.log("üöÄ ~ file: index.js ~ line 41 ~ fetchArticles ~ articles", articles);
//     } catch (error) {
//         console.error(error);
//     }
// };

// fetchArticles();

// ********************************************************************************************

/*=============================================
=            SECONDE VERSION AVEC DOCUMENTFRAGMENT ET BOUCLE FOR OF           =
=============================================*/
// Les am√©liorations apport√©es incluent l'utilisation d'un DocumentFragment pour stocker temporairement les √©l√©ments cr√©√©s avant de les ajouter √† la page, ainsi que l'utilisation d'une boucle for...of pour it√©rer sur le tableau d'articles plut√¥t que map. La boucle for...of est g√©n√©ralement plus performante pour l'it√©ration sur les tableaux car elle √©vite de cr√©er un nouveau tableau.

const articlesContainerElement = document.querySelector(".articles-container");

// Cette fonction prend un tableau d'articles en param√®tre et cr√©e un √©l√©ment HTML pour chaque article.
const createArticles = (articles) => {
    // Cr√©e un fragment de document pour stocker temporairement les √©l√©ments cr√©√©s.
    const fragment = new DocumentFragment();

    // Cr√©e un √©l√©ment div pour chaque article et l'ajoute au fragment.
    for (const article of articles) {
        const singleArticleDOM = document.createElement("div");
        singleArticleDOM.classList.add("article");
        singleArticleDOM.innerHTML = `
      <img class="article-profile" src="${article.img}" alt="profile" />
      <h2 class="article-title">${article.title}</h2>
      <p class="article-author">${article.author}</p>
      <p class="article-content">
      ${article.article}
      </p>
      <div class="article-actions">
      <button class="btn btn-danger data-id=${article._id}">Supprimer</button>
      <button class="btn btn-primary">Modifier</button>
      </div>
      `;
        fragment.prepend(singleArticleDOM);
        // prepend au lieu de append ajoute les √©l√©ments dans l'ordre inverse de l'it√©ration de la boucle et donc d'avoir les articles les plus r√©cents en haut de page.
    }

    // Efface le contenu de l'√©l√©ment HTML s√©lectionn√© et ajoute les √©l√©ments cr√©√©s en une seule op√©ration.
    articlesContainerElement.innerHTML = "";
    articlesContainerElement.append(fragment);
};

// Cette fonction est asynchrone et utilise l'API Fetch pour r√©cup√©rer des donn√©es d'un endpoint de l'API REST.
const fetchArticles = async (param) => {
    try {
        // R√©cup√®re les donn√©es √† partir de l'API REST en utilisant l'API Fetch.
        const response = await fetch("https://restapi.fr/api/ackblog2");
        // Convertit les donn√©es retourn√©es en objet JavaScript.
        let articles = await response.json();

        // Si l'objet retourn√© n'est pas un tableau, transforme-le en tableau.
        if (!Array.isArray(articles)) {
            articles = [articles];
        }

        // Appelle la fonction `createArticles` pour afficher les articles r√©cup√©r√©s dans la page HTML.
        createArticles(articles);
    } catch (error) {
        // Si une erreur se produit, affiche-la dans la console.
        console.error(error);
    }
};

// Appelle la fonction `fetchArticles` pour r√©cup√©rer et afficher les articles.
fetchArticles();
